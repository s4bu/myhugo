<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fuzzing on Vishal Mishra</title>
    <link>https://www.vishalmishra.in/tags/fuzzing/</link>
    <description>Recent content in Fuzzing on Vishal Mishra</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 04 Jan 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.vishalmishra.in/tags/fuzzing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CLI Security Testing: Stack Smashing</title>
      <link>https://www.vishalmishra.in/post/stack-smashing/</link>
      <pubDate>Thu, 04 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.vishalmishra.in/post/stack-smashing/</guid>
      <description>Fuzzing Command Line Utilities Following up from one of my previous article, I will be fuzzing CLI params using JAFFY fuzzer and try to smash the stack on a vulnerable program.
Jaffy can fuzz binaries that you run on the command line. It takes a simple XML as input to specify the arguments details and you are ready to go. In order to run jaffy you need to install this python3 module:</description>
    </item>
    
    <item>
      <title>CLI Security Testing</title>
      <link>https://www.vishalmishra.in/post/cli-security-testing/</link>
      <pubDate>Tue, 26 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.vishalmishra.in/post/cli-security-testing/</guid>
      <description>Command Line Interface Security Testing CLIs (Command Line Interface/Utility) offer a lot of commands to make system information easily available &amp;amp; manageable. Many of these commands offer various arguments (functionalities). These command line utilities and their arguments should be programmed in such a way that they should not be vulnerable or contain any logical flaw that can allow malicious user of CLI to escalate privilege, access unauthorized info, bypass ACL etc.</description>
    </item>
    
    <item>
      <title>Nodejs Mutation Based Fuzzer</title>
      <link>https://www.vishalmishra.in/post/nodejs-mutation-based-fuzzer/</link>
      <pubDate>Thu, 21 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.vishalmishra.in/post/nodejs-mutation-based-fuzzer/</guid>
      <description>Mutation Fuzzers (AKA Dumb Fuzzers üòâ) Mutation Fuzzers are all about mutating the existing input values (blindly). That‚Äôs why it is known as ‚Äúdumb‚Äù fuzzers, as it lacks understanding of the complete format/structure of the data. One example of data mutation can be just replacing/appending a random section of data. Some methods used by mutation fuzzers to generate the data are:
 Bit flipping Random postfix Random prefix encoding disruption  We will be looking at one of the mutation based fuzzer written in NodeJS today.</description>
    </item>
    
  </channel>
</rss>