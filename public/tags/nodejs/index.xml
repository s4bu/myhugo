<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NodeJS on Vishal Mishra</title>
    <link>https://www.vishalmishra.in/tags/nodejs/</link>
    <description>Recent content in NodeJS on Vishal Mishra</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 21 Dec 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.vishalmishra.in/tags/nodejs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Nodejs Mutation Based Fuzzer</title>
      <link>https://www.vishalmishra.in/post/nodejs-mutation-based-fuzzer/</link>
      <pubDate>Thu, 21 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.vishalmishra.in/post/nodejs-mutation-based-fuzzer/</guid>
      <description>Mutation Fuzzers (AKA Dumb Fuzzers üòâ) Mutation Fuzzers are all about mutating the existing input values (blindly). That‚Äôs why it is known as ‚Äúdumb‚Äù fuzzers, as it lacks understanding of the complete format/structure of the data. One example of data mutation can be just replacing/appending a random section of data. Some methods used by mutation fuzzers to generate the data are:
 Bit flipping Random postfix Random prefix encoding disruption  We will be looking at one of the mutation based fuzzer written in NodeJS today.</description>
    </item>
    
    <item>
      <title>Hacking JSON Web Token</title>
      <link>https://www.vishalmishra.in/post/hacking-json-web-token/</link>
      <pubDate>Wed, 06 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.vishalmishra.in/post/hacking-json-web-token/</guid>
      <description>Attack JWT is a URL safe, stateless protocol for transferring claims. A JWT token looks something like this: Header.UserStateInformation.Signature
Sample:
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
 eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.
 TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
The information in token are separated by dots. The first and second part can be easily converted to ascii as they are base64 encoding of plain text. That being said lets dig in to these three parts of JWT token, header contain information about the algo used to encrypt (correct term would be hash generation :P).</description>
    </item>
    
  </channel>
</rss>